class Solution {
public:
    int countIslands(vector<vector<int>>& grid, int k) {
        int n = grid.size();
        if (n == 0) return 0;
        int m = grid[0].size();
        
        vector<vector<bool>> se(n, vector<bool>(m, false));
        int res = 0;
        int dir[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
        
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (!se[i][j] && grid[i][j] > 0) {
                    long long sum = 0;
                    queue<pair<int,int>> q;
                    q.emplace(i, j);
                    se[i][j] = true;
                    
                    while (!q.empty()) {
                        auto [r, c] = q.front(); q.pop();
                        sum += grid[r][c];
                        
                        for (auto &d : dir) {
                            int x = r + d[0], y = c + d[1];
                            if (x >= 0 && x < n && y >= 0 && y < m
                                && !se[x][y] && grid[x][y] > 0) {
                                se[x][y] = true;
                                q.emplace(x, y);
                            }
                        }
                    }
                    
                    if (sum % k == 0) 
                        ++res;
                }
            }
        }
        
        return res;
    }
};
