class Solution {
public:
    int popD(long long x){
        int d = 0;
        while (x != 1) {
            x = __builtin_popcountll(x);
            ++d;
        }
        return d;
    }

    vector<int> popcountDepth(vector<long long>& nums, vector<vector<long long>>& queries) {
        auto a = nums;
        int n = nums.size();
        vector<vector<int>> bit(6, vector<int>(n+1, 0));

        auto upd = [&](int k, int idx, int v){
            for (int i = idx + 1; i <= n; i += i & -i)
                bit[k][i] += v;
        };

        auto pref = [&](int k, int idx){
            int s = 0;
            for (int i = idx + 1; i > 0; i -= i & -i)
                s += bit[k][i];
            return s;
        };

        auto qury = [&](int k, int l, int r){
            return pref(k, r) - (l ? pref(k, l - 1) : 0);
        };
        for (int i = 0; i < n; ++i) {
            int d = popD(nums[i]);
            upd(d, i, 1);
        }

        vector<int> res;
        res.reserve(queries.size());

        for (auto& q : queries) {
            if (q[0] == 1) {
                int l = q[1], r = q[2], k = q[3];
                res.push_back(qury(k, l, r));
            } else {
                int idx = q[1];
                long long b = q[2];
                int x = popD(nums[idx]);
                int y = popD(b);

                if (x != y) {
                    upd(x, idx, -1);
                    upd(y, idx, +1);
                }
                nums[idx] = b;
            }
        }
        return res;
    }
};
