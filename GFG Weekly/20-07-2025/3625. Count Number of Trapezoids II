struct H1 {
    size_t operator()(pair<int,int> const& p) const noexcept {
        return (uint64_t(p.first) << 32) ^ uint64_t(p.second);
    }
};

struct H2 {
    size_t operator()(array<int,4> const& a) const noexcept {
        uint64_t h = uint64_t(a[0]) << 48 ^ uint64_t(a[1]) << 32 ^ uint64_t(a[2]) << 16 ^ uint64_t(a[3]);
        h ^= h >> 33; h *= 0xff51afd7ed558ccdULL;
        h ^= h >> 33; h *= 0xc4ceb9fe1a85ec53ULL;
        h ^= h >> 33;
        return size_t(h);
    }
};

int g(int a, int b) { return b == 0 ? abs(a) : g(b, a % b); }

class Solution {
    unordered_map<pair<int,int>, long long, H1> a;
    unordered_map<pair<int,int>, unordered_map<array<int,4>, long long, H2>, H1> b;
    unordered_map<pair<int,int>, long long, H1> c;
    unordered_map<pair<int,int>, unordered_map<pair<int,int>, long long, H1>, H1> d;

    void f(vector<vector<int>>& pts) {
        int n = pts.size();
        for (int i = 0; i < n; ++i) {
            auto &A = pts[i];
            for (int j = i+1; j < n; ++j) {
                auto &B = pts[j];
                int dx = B[0] - A[0], dy = B[1] - A[1];
                if (dx == 0) { dy = 1; dx = 0; }
                else if (dy == 0) { dy = 0; dx = 1; }
                else {
                    if (dx < 0) { dx = -dx; dy = -dy; }
                    int g1 = g(abs(dy), abs(dx));
                    dy /= g1; dx /= g1;
                }
                pair<int,int> s{dy, dx};
                array<int,4> k;
                if (dx == 0) {
                    k = {dy, dx, A[0], 1};
                } else {
                    int bn = A[1]*dx - A[0]*dy;
                    int bd = dx;
                    int g2 = g(abs(bn), bd);
                    bn /= g2; bd /= g2;
                    if (bd < 0) { bd = -bd; bn = -bn; }
                    k = {dy, dx, bn, bd};
                }
                pair<int,int> m{A[0] + B[0], A[1] + B[1]};
                a[s]++;
                b[s][k]++;
                c[m]++;
                d[m][s]++;
            }
        }
    }

    long long cal() {
        long long ks = 0, ks2 = 0;
        for (auto &p : a) { ks += p.second; ks2 += p.second * p.second; }
        long long par = (ks2 - ks) / 2;

        long long ls = 0, ls2 = 0;
        for (auto &x : b)
            for (auto &q : x.second) {
                ls += q.second;
                ls2 += q.second * q.second;
            }
        long long sam = (ls2 - ls) / 2;
        long long tot = par - sam;

        long long para = 0;
        for (auto &x : c) {
            auto m = x.first;
            long long M = x.second, s2 = 0;
            for (auto &z : d[m]) s2 += z.second * z.second;
            para += (M * M - s2) / 2;
        }

        return tot - para;
    }

public:
    int countTrapezoids(vector<vector<int>>& pts) {
        f(pts);
        return int(cal());
    }
};
